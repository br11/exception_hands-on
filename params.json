{"name":"Exception hands-on","tagline":"Hands-on","body":"Neste hand-on você partirá de uma aplicação pronta e irá, gradativamente, acrescentar  melhorias ao tratamento de exceções. Ao término você perceberá como cada melhoria contribuiu para que a aplicação se tornasse mais confiável.\r\n\r\nSiga atentamente as instruções contidas nas três seções a seguir antes de iniciar a execução dos exercícios.\r\n\r\nEste documento também está disponível em [https://docs.google.com/...](https://docs.google.com/document/d/1IepxBa9vvOJwlnM5aoDLDMAF6H7GnCIwjKFk-1dvCKU/pub)\r\n\r\n### Requisitos\r\n\r\n* Git\r\n* JDK 1.7.x\r\n* Maven 3.x\r\n* Eclipse Standard IDE\r\n\r\n\r\n### Preparação\r\n\r\nExecutar os seguintes passos para baixar os fontes e gerar o projeto do Eclipse.\r\n\r\n```\r\n> mkdir hands-on\r\n> cd hands-on\r\n> git clone https://github.com/br11/exception_hands-on.git\r\n> cd exception_hands-on\r\n> mvn eclipse:clean eclipse:eclipse\r\n```\r\nVeja o [vídeo](http://youtu.be/CQmD64M-ZJQ)\r\n\r\nApós executar os comandos acima, importe o projeto no eclipse.\r\nCaso não queira usar Maven e Git você podera fazer o download e descompactar o arquivo .zip, criar um projeto no eclipse apontando para a pasta descompactada. No Eclipse, crie uma source folder apontando para *src/main/java*.\r\n\r\n\r\n### Execução\r\n\r\nExecute a classe br.atech.workshop.bestpractices.app.Boot contida no projeto.\r\n\r\nPreencha o campo nome com o texto “maria” (sem aspas). \r\n\r\nA cada clique no botão Check 3 a aplicação irá retornar um resultado diferente. São 4 (quatro) possibilidades de resultado.\r\n*Erro de leitura;\r\n*Sucesso;\r\n*Falha interna;\r\n*Erro de conexão.\r\n\r\n\r\n![](https://lh5.googleusercontent.com/DtSzqsxl3C9DFGdjGQCZhl8EgpWesEQLuZC0-Z7DQC-TpkNWlDQmF6QJTiJGtGbyIfNTmfeG0Pry1LJN1x6qudMqKRn3L-T4Wziw6hKpG4jMlX2vSEYW-PzdQyylDl46aQ)\r\n![](https://lh3.googleusercontent.com/_VUNr0wEH0iUFvdPqBJSwCsy-h0Ia_1P8boyKE0iNpxYNub7CprgCOgkrUrzTREc28RsCX1v_M7FS96ZLpXGpCcsNZg4PdiZYp3PM4DyOKZp83DauEdcMcRAFMeuDiIhSA)\r\n![](https://lh6.googleusercontent.com/zbe_Sclt1GuS7hwcMa-zmNL1_0IOZeYugZJ9eUfGhoyfYfTRXfijSTgqcH-T5O9sUipFVp2H8iawzb9y3ljJSnTSC9ZcrkxB_oVLz5nOyinKzZZTKfW5HB_ReVTPOzDITg)\r\n![](https://lh3.googleusercontent.com/MFKZIZIglbM-QhyDFLFmN3wae-a8EQ-gR6JvH7_ZkzzIyIqryT6MYTrrk6uI4Wx0c3JZpyqni5XQDZC7k0MmlR3aGh2Nbsmhq7XjnlUtfvfprUtx9ZlN3zQraFzlKGko3w)\r\n\r\nApós 4 cliques consecutivos no botão Check 3 os resultados se repetirão.\r\n\r\n\r\n### Exercícios\r\n\r\nÉ necessários que os exercício seja executados em sequência. Durante a codificação, aproveite para explorar o código fonte e analisar as alterações que estão sendo propostas. Sempre execute a aplicação após concluir cada exercício - siga as instruções descritas na sessão Execução.\r\n\r\n\r\n**Exercício 1**\r\n\r\nImplementar um componente de tratamento de exceção.\r\n\r\n\tExceptionHandler.java\r\n\r\n\tpublic class ExceptionHandler {\r\n\r\n\t\tpublic Gui gui;\r\n\r\n\t\tpublic ExceptionHandler(Gui gui) {\r\n\t\t    this.gui = gui;\r\n\t\t}\r\n\r\n\t\tpublic void handle(Throwable t) {\r\n\t\t    // Log\r\n\t\t    t.printStackTrace();\r\n\t\t    // user friendly message\r\n\t\t    gui.error(translate(t));\r\n\t\t}    \r\n\r\n\t\tprivate String translate(Throwable t) {\r\n\t\t    return \"Falha de operação.\";\r\n\t\t}\r\n\t}\r\n\r\n\r\n**Exercício 2**\r\n\r\nImplementar um componente  ActionListener padrão.\r\n\r\n\tBaseAction.java\r\n\r\n\tpublic abstract class BaseAction implements ActionListener {\r\n\r\n\t\tprivate ExceptionHandler exHandler;\r\n\t\tprivate Gui gui;\r\n\r\n\t\tBaseAction(Gui gui) {\r\n\t\t    this.gui = gui;\r\n\t\t    this.exHandler = new ExceptionHandler(gui);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic void actionPerformed(ActionEvent event) {\r\n\t\t    gui.reset();\r\n\t\t    try {\r\n\t\t        doAction(event);\r\n\t\t    } catch (Exception e) {\r\n\t\t        exHandler.handle(e);\r\n\t\t    }\r\n\t\t}\r\n\r\n\t\tpublic abstract void doAction(ActionEvent event) throws Exception;\r\n\t}\r\n\r\n\r\n**Exercício 3**\r\n\r\nAplicar o componente de tratamento de exceção à tela.\r\n\r\n\tGui.java  \r\n\r\n\tprivate void addListeners() {\r\n\r\n        btn1.addActionListener(new BaseAction(this) {\r\n            @Override\r\n            public void doAction(ActionEvent event) throws Exception {\r\n                resultfield.setText(app.feature1(namefield.getText()));\r\n            }\r\n        });\r\n\r\n        btn2.addActionListener(new BaseAction(this) {\r\n            @Override\r\n            public void doAction(ActionEvent event) throws Exception {\r\n                resultfield.setText(app.feature2(namefield.getText()));\r\n            }\r\n        });\r\n\r\n        btn3.addActionListener(new BaseAction(this) {\r\n            @Override\r\n            public void doAction(ActionEvent event) throws Exception {\r\n                resultfield.setText(app.feature3(namefield.getText()));\r\n            }\r\n        });\r\n\t}\r\n\r\n\r\n**Exercício 4**\r\n\r\nMelhor a mensagem exibida ao usuário. Fornecer mais informações ao usuário a respeito da “falha”.\r\n\r\n\tExceptionHandler.java\r\n\r\n    private String translate(Throwable t) {\r\n        if (t instanceof AppException) {\r\n            return \"Não foi possível processar sua requisição.\";\r\n        } else if (t instanceof RuntimeException) {\r\n            return \"Falha interna. Notifique o administrador do sistema.\";\r\n        } else {\r\n            return \"Falha de operação.\";\r\n        }\r\n    }\r\n\r\n\r\n**Exercício 5**\r\n\r\nAplicando uma convensão para lançamento checked exceptions a partir de métodos que não declaram exceptions.\r\n\r\n\tLegacyDataIterator.java\r\n\r\n    @Override\r\n    public boolean hasNext() {\r\n        try {\r\n            return !pointer.eof();\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(\"Erro de conexão/leitura.\", e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public Integer next() {\r\n        try {\r\n            return pointer.getValue();\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(\"Erro de conexão/leitura.\", e);\r\n        }\r\n    }\r\n\r\n\r\n**Exercício 6**\r\n\r\nImplementando a convensão no handler.\r\n\r\n\tExceptionHandler.java\r\n\r\n    private String translate(Throwable t) {\r\n        Throwable err = t;\r\n        while (err.getCause() != null\r\n                && err.getClass().equals(RuntimeException.class)) {\r\n            err = err.getCause();\r\n        }\r\n\r\n        if (err instanceof AppException) {\r\n            return \"Não foi possível processar sua requisição.\";\r\n        } else if (err instanceof RuntimeException) {\r\n            return \"Falha interna. Notifique o administrador do sistema.\";\r\n        } else {\r\n            return \"Falha de operação.\";\r\n        }\r\n    }\r\n\r\n\r\n**Exercício 7**\r\n\r\nCriando subsídios para o posterior diagnóstico da “falha”.\r\n\r\n\tApp.java\r\n\r\n    private String requestInformation(DataProvider<Integer> provider,\r\n            String query) throws AppException {\r\n        try {\r\n            provider.connect();\r\n\r\n            StringBuilder sb = new StringBuilder();\r\n            Iterator<Integer> data = provider.getData(query);\r\n            while (data.hasNext()) {\r\n                Integer part = data.next();\r\n                if (part != null) {\r\n                    sb.append(part);\r\n                }\r\n                sb.append(\"; \");\r\n            }\r\n\r\n            return sb.toString();\r\n        } catch (DataException e) {\r\n            throw new InfoRequestException(provider, e);\r\n            \r\n        } catch (RuntimeException e) {\r\n            if (e.getClass().equals(RuntimeException.class) \r\n                && !(e.getCause() instanceof RuntimeException)) {\r\n                throw new InfoRequestException(provider, e.getCause());\r\n            } else {\r\n                throw e;\r\n            }\r\n\r\n        } finally {\r\n            provider.releaseConnection();\r\n        }\r\n    }\r\n\r\n\r\n**Exercício 8**\r\n\r\nAprimorando a mensagem exibida ao usuário.\r\n\r\n\tExceptionHandler.java\r\n\r\n    private String translate(Throwable t) {\r\n        Throwable err = t;\r\n        while (err.getCause() != null\r\n                && err.getClass().equals(RuntimeException.class)) {\r\n            err = err.getCause();\r\n        }\r\n\r\n        if (err instanceof InfoRequestException) {\r\n            if (err.getCause() != null\r\n                    && err.getCause().getMessage().contains(\"1404\")) {\r\n                return \"Erro de leitura: \"\r\n                        + ((InfoRequestException) err).getProvider();\r\n            } else {\r\n                return \"Erro de conexão: \"\r\n                        + ((InfoRequestException) err).getProvider();\r\n            }\r\n        } else if (err instanceof AppException) {\r\n            return \"Não foi possível processar sua requisição.\";\r\n        } else if (err instanceof RuntimeException) {\r\n            return \"Falha interna. Notifique o administrador do sistema.\";\r\n        } else {\r\n            return \"Falha de operação.\";\r\n        }\r\n    }\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}